from flask import Flask, request, jsonify
from supabase import create_client, Client
from rapidfuzz import process

# --- C·∫•u h√¨nh Supabase ---
SUPABASE_URL = "https://skrmxsdfimvelnkrnhif.supabase.co"  # Thay b·∫±ng URL th·∫≠t c·ªßa b·∫°n
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNrcm14c2RmaW12ZWxua3JuaGlmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY4NjAwMDEsImV4cCI6MjA2MjQzNjAwMX0.KFBDyJ92KrDFuI8atA_tq50IsAmPlixmsaNYiAeUbq4"   # Thay b·∫±ng key th·∫≠t

supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
app = Flask(__name__)

# --- Chu·∫©n h√≥a t√™n d·ª± √°n ---
def normalize_name(name: str) -> str:
    if not isinstance(name, str):
        return ""
    name = name.lower()
    name = name.replace("tr·∫°m bi·∫øn √°p", "tba")
    name = name.replace("tr·∫°m", "tba")
    name = name.replace(" ", "")
    return name

# --- T√¨m d·ª± √°n ph√π h·ª£p ho·∫∑c g·ª£i √Ω ---
def find_best_project(input_text: str, project_list: list):
    norm_input = normalize_name(input_text)
    suggestions = []
    matched_project = None

    for p in project_list:
        raw_name = p.get("ten_du_an")
        if not raw_name:
            continue
        norm_db_name = normalize_name(raw_name)

        # Kh·ªõp ho√†n to√†n
        if "tba" in norm_db_name and norm_input in norm_db_name:
            matched_project = p
            break

        # G·ª£i √Ω n·∫øu c√≥ ph·∫ßn gi·ªëng ph√≠a sau
        if "tba" in norm_db_name and norm_input[-12:] in norm_db_name:
            suggestions.append(raw_name)

    return matched_project, suggestions

# --- API POST: Th√™m s·ª± ki·ªán ---
@app.route("/event", methods=["POST"])
def add_event():
    print("üî• [POST] Nh·∫≠n y√™u c·∫ßu th√™m s·ª± ki·ªán m·ªõi")
    data = request.json
    print("üì• D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", data)

    short_name = data.get("du_an")
    projects = supabase.table("project").select("id, ten_du_an").execute().data
    matched_project, suggestions = find_best_project(short_name, projects)

    if not matched_project:
        return jsonify({
            "error": "Kh√¥ng t√¨m th·∫•y d·ª± √°n ph√π h·ª£p",
            "suggestions": suggestions
        }), 404

    print("‚úÖ D·ª± √°n:", matched_project["ten_du_an"])
    event_data = {
        "project_id": matched_project["id"],
        "ngay_van_ban": data.get("ngay_van_ban"),
        "so_van_ban": data.get("so_van_ban"),
        "noi_dung_tom_tat": data.get("noi_dung_tom_tat"),
        "noi_dung_day_du": data.get("noi_dung_day_du"),
        "ghi_chu": data.get("ghi_chu"),
        "nguoi_thuc_hien": data.get("nguoi_thuc_hien"),
        "tinh_trang": data.get("tinh_trang"),
    }
    supabase.table("events").insert(event_data).execute()
    print("‚úÖ ƒê√£ ghi d·ªØ li·ªáu s·ª± ki·ªán v√†o Supabase")

    return jsonify({"success": True, "project": matched_project["ten_du_an"]})

# --- API GET: L·∫•y danh s√°ch s·ª± ki·ªán ---
@app.route("/event", methods=["GET"])
def list_events():
    print("üîç [GET] Nh·∫≠n y√™u c·∫ßu l·∫•y danh s√°ch s·ª± ki·ªán")
    short_name = request.args.get("du_an")
    print("üì• Tham s·ªë d·ª± √°n:", short_name)

    projects = supabase.table("project").select("id, ten_du_an").execute().data
    matched_project, suggestions = find_best_project(short_name, projects)

    if not matched_project:
        return jsonify({
            "error": "Kh√¥ng t√¨m th·∫•y d·ª± √°n ph√π h·ª£p",
            "suggestions": suggestions
        }), 404

    print("‚úÖ D·ª± √°n:", matched_project["ten_du_an"])
    events = supabase.table("events").select("*").eq("project_id", matched_project["id"]).execute().data
    print(f"üìä S·ªë s·ª± ki·ªán t√¨m th·∫•y: {len(events)}")

    return jsonify({
        "project": matched_project["ten_du_an"],
        "so_luong": len(events),
        "events": events
    })
@app.route("/project", methods=["POST"])
def add_project():
    try:
        print("üî• [POST] Nh·∫≠n y√™u c·∫ßu th√™m d·ª± √°n m·ªõi")
        data = request.json
        print("üì• D·ªØ li·ªáu nh·∫≠n:", data)

        ten_du_an = data.get("ten_du_an")
        if not ten_du_an:
            return jsonify({"error": "Thi·∫øu tr∆∞·ªùng 'ten_du_an'"}), 400

        # Cho ph√©p c√°c tr∆∞·ªùng c√≤n l·∫°i ƒë·ªÉ tr·ªëng n·∫øu kh√¥ng c√≥
        
        project_data = {
            "ten_du_an": ten_du_an,
            "cong_suat_mva": data.get("cong_suat_mva", None),
            "chieu_dai_km": data.get("chieu_dai_km", None),
            "don_vi_quan_ly": data.get("don_vi_quan_ly", None),
            "quy_mo": data.get("quy_mo", None),
            "khoi_cong": data.get("khoi_cong", None),
            "dong_dien": data.get("dong_dien", None)
        }

        result = supabase.table("project").insert(project_data).execute()
        print("‚úÖ ƒê√£ th√™m d·ª± √°n:", ten_du_an)
        return jsonify({"success": True, "ten_du_an": ten_du_an}), 200

    except Exception as e:
        print("‚ùå L·ªói khi x·ª≠ l√Ω /project:", str(e))
        return jsonify({"error": "L·ªói m√°y ch·ªß", "chi_tiet": str(e)}), 500

# --- Ch·∫°y local ---
if __name__ == "__main__":
    app.run(debug=True)
